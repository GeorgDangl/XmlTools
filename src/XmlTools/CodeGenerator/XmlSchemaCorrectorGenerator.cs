using System;
using System.Linq;
using System.Reflection;
using System.Text;

namespace XmlTools.CodeGenerator
{
    public class XmlSchemaCorrectorGenerator
    {
        private const string CORRECTOR_CLASS_NAME = "SchemaCorrector";

        public XmlSchemaCorrectorGenerator(XmlSchema schema, CodeGeneratorOptions options)
        {
            _schema = schema;
            _options = options;
        }

        private readonly XmlSchema _schema;
        private readonly CodeGeneratorOptions _options;
        private string _result;
        private readonly StringBuilder _stringBuilder = new StringBuilder();

        public string GenerateCode()
        {
            if (_result != null)
            {
                return _result;
            }
            GenerateUsings();
            GenerateClassInNamespace();
            return _result = CodeFormatter.IndentCode(_stringBuilder.ToString());
        }

        private void GenerateUsings()
        {
            var usings = new[] {"System.Xml.Linq", "System.Linq", "System.CodeDom.Compiler" };
            foreach (var usingStatement in usings.OrderBy(u => u))
            {
                _stringBuilder.AppendLine($"using {usingStatement};");
            }
            _stringBuilder.AppendLine();
        }

        private void GenerateClassInNamespace()
        {
            _stringBuilder.AppendLine($"namespace {_options.Namespace}");
            _stringBuilder.AppendLine("{");
            GenerateAutoGeneratedCodeAttribute();
            _stringBuilder.AppendLine($"public class {CORRECTOR_CLASS_NAME}");
            _stringBuilder.AppendLine("{");
            GenerateConstructorAndInstanceVariables();
            GenerateMethods();
            _stringBuilder.AppendLine("}");
            _stringBuilder.AppendLine("}");

        }

        private void GenerateConstructorAndInstanceVariables()
        {
            _stringBuilder.AppendLine($"public {CORRECTOR_CLASS_NAME}(XDocument document)");
            _stringBuilder.AppendLine("{");
            _stringBuilder.AppendLine($"_document = document;");
            _stringBuilder.AppendLine("}");
            _stringBuilder.AppendLine($"private readonly XDocument _document;");
        }

        private void GenerateAutoGeneratedCodeAttribute()
        {
            var assembly = typeof(XmlSchemaCorrectorGenerator).GetTypeInfo().Assembly;
            var toolName = assembly.GetName().Name;
            var assemblyVersion = assembly.GetName().Version;
            var toolVersion = $"{assemblyVersion.Major}.{assemblyVersion.Minor}.{assemblyVersion.Revision}";
            var generatedCodeAttribute = $"[GeneratedCode(\"{toolName}\", \"{toolVersion}\")]";
            _stringBuilder.AppendLine(generatedCodeAttribute);
        }

        private void GenerateMethods()
        {
            var rootElementCodeGen = new RootElementCodeGenerator(_schema, _stringBuilder);
            rootElementCodeGen.GenerateCheckingCode();
            GenerateElementTypeMethods();
            GenerateAttributeTypeMethods();
        }

        private void GenerateElementTypeMethods()
        {
            var xmlElementTypes = _schema.GetAllDeclaredElementTypes();
            var typeCodeGenerator = new XmlTypeCheckCodeGeneratorVisitor(_stringBuilder);
            foreach (var xmlElementType in xmlElementTypes.OrderBy(t => t.Name))
            {
                typeCodeGenerator.GenerateTypeCheckingMethod(xmlElementType);
            }
        }

        private void GenerateAttributeTypeMethods()
        {
            var xmlAttributeTypes = _schema.GetAllDeclaredAttributeTypes();
            var xmlAttributeTypeCheckMethodGenerator = new XmlAttributeTypeCheckMethodGenerator(_stringBuilder);

            foreach (var xmlAttributeType in xmlAttributeTypes.OrderBy(t => t.Name))
            {
                xmlAttributeTypeCheckMethodGenerator.GenerateTypeCheckingMethod(xmlAttributeType);
            }
        }
    }
}